{"version":3,"sources":["Components/OnlyPlayButton.js","Components/OnlyPlayPauseButton.js","Components/Audio.js","App.js","serviceWorker.js","index.js"],"names":["OnlyPlayButton","props","getProgress","state","played","undefined","ref","duration","setState","progress","seek","getDuration","handleClick","playing","disabled","cookies","Cookies","updated_viewed","get","test","set","cookie","viewed","question","path","handleEnd","src","React","createRef","main","includes","this","intervalID","setInterval","clearInterval","Button","onClick","onLoad","onEnd","Progress","value","Component","OnlyPlayPauseButton","plays","getTime","addCookie","current_cookie","count","parseInt","remove","toString","console","log","checkCookie","getAll","removeCookie","handleReplay","jump","handlePlay","rval","Audio","className","map","key","App","basename","process","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0e6579cc.chunk.js","sourcesContent":["import React from 'react';\nimport ReactHowler from 'react-howler';\nimport { Button, Progress } from 'reactstrap';\nimport Cookies from 'universal-cookie';\n\n/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  Main: #\n  }\n*/\n\nclass OnlyPlayButton extends React.Component {\n  constructor(props){\n    super(props);\n\n    // initialize state variables\n    this.state = {\n      playing: false,\n      progress: 0,\n      disabled: false,\n      played: 0\n    }\n\n    // pass down props\n    this.src = props.src;\n    this.question = props.question;\n    this.test = props.test;\n\n    // get ready to connect to the howler element\n    this.ref = React.createRef();\n\n\n    // Get cookies for if they are reloading the page\n    const cookies = new Cookies();\n    this.cookie = cookies.get(this.test);\n\n    // make cookie if it's undefined\n    if (this.cookie === undefined){\n      cookies.set(this.test, {viewed: [], main: 0}, { path: \"/\" });\n      this.cookie = {viewed: [], main: 0};\n    }\n\n    // get the data and store it in state if it already existed\n    else {\n      if (this.cookie[\"viewed\"].includes(this.question)){\n        this.state.disabled = true;\n        this.state.played = 2\n      }\n    }\n  }\n\n  // check the progress bar ten times a second\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.getProgress(),\n      100\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  getProgress = () => {\n    // fill progress bar if they listened to it on this visit\n\n    // Already played max times\n    if (this.state.played === 2){\n      this.setState({ progress: 100 });\n      return;\n    }\n\n    // get progress\n    else if (this.ref !== undefined && this.state.duration !== undefined){\n      this.setState({\n        progress: this.ref.seek() / this.state.duration * 100\n      });\n    } return;\n  }\n\n  getDuration = () => {\n    // returns length of audio clip in seconds\n    this.setState({\n      duration: this.ref.duration()\n    });\n  }\n\n  handleClick = () => {\n    // Set the button as disabled so that they can't pause\n    // the cookies are set after the promise to avoid async with the bar loading\n    this.setState((state, props) => {\n      return {\n        playing: !state.playing,\n        disabled: true,\n        played: state.played + 1\n      }\n    }, () => {\n      const cookies = new Cookies();\n      const updated_viewed = cookies.get(this.test)[\"viewed\"];\n      cookies.set(this.test, {...this.cookie, viewed: [...updated_viewed, this.question]}, { path : \"/\" });\n    });\n  }\n\n  handleEnd = () => {\n    this.setState((state, props) => {\n      return {\n        playing: false,\n        played: state.played + 1\n      };\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <Button onClick={this.handleClick} disabled={this.state.disabled}>Play</Button>\n        <ReactHowler\n          src={[this.src]}\n          playing={this.state.playing}\n          ref={ref => this.ref = ref}\n          onLoad={this.getDuration}\n          onEnd={this.handleEnd}\n        />\n        <Progress value={this.state.progress} />\n      </div>\n    );\n  }\n}\n\nexport default OnlyPlayButton;\n","import React from 'react';\nimport ReactHowler from 'react-howler';\nimport { Button, Progress } from 'reactstrap';\nimport Cookies from 'universal-cookie';\n\n/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  main: #\n}\n  }\n*/\n\nclass OnlyPlayPauseButton extends React.Component {\n  // Play Pause and restart should all be one button\n\n  constructor (props) {\n    super(props);\n\n    // initialize state variables\n    this.state = {\n      playing: false,\n      progress: 0,\n      plays: 0,\n      disabled: false\n    }\n\n    // pass down props\n    this.src = props.src;\n    this.question = props.question;\n    this.test = props.test;\n\n    // Create reference to the audio compornent\n    this.ref = React.createRef();\n\n    // Get cookies for if they are reloading the page\n    const cookies = new Cookies();\n    this.cookie = cookies.get(this.test);\n\n    // make cookie if it's undefined\n    if (this.cookie === undefined){\n      cookies.set(this.test, {viewed: [], main: 0}, { path: \"/\" });\n      this.cookie = {viewed: [], main: 0};\n    }\n\n    // Check cookies to see if they've already accessed and disable if necessary\n    else {\n      this.state.plays = parseInt(this.cookie[\"main\"])\n    }\n\n    // disable button if max amount of plays have been reached\n    if (this.state.plays >= 2){\n      this.state.disabled = true;\n    }\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.getProgress(),\n      100\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  getProgress = () => {\n    // return full bar if they previously used up all their listens\n    // returns a percentage if they haven't\n\n    // used up their listens on previous visit\n    if (this.state.plays >= 2 && this.getTime() == 0){\n      this.setState({\n        progress: 100\n      }); return;\n    }\n\n    // still have listens and will return percentage\n    if (this.ref !== undefined && this.state.duration !== undefined){\n      this.setState({\n        progress: this.ref.seek() / this.state.duration * 100\n      });\n    } else {\n      this.setState({\n        progress: 0\n      });\n    }\n  }\n\n  getDuration = () => {\n    this.setState({\n      duration: this.ref.duration()\n    });\n  }\n\n  addCookie = () => {\n    const cookies = new Cookies();\n\n    const current_cookie = cookies.get(\"view count\")\n\n    if (cookies.get(\"view count\") !== undefined){\n      // There is already a cookie so increment\n      const count = parseInt(current_cookie) + 1;\n      // I feel like there should be an update cookie thing but this is easier\n      cookies.remove('view count', { path: '/' });\n      cookies.set('view count', count.toString(), { path: '/' });\n    } else {\n      // There is currently no cookie so add one\n      cookies.set('view count','0', { path: '/' });\n    console.log(\"added cookie\");\n    }\n  }\n\n  checkCookie = () => {\n    const cookies = new Cookies();\n    console.log(cookies.getAll());\n  }\n\n  removeCookie = () => {\n    const cookies = new Cookies();\n    cookies.remove(this.test, { path: '/' });\n    console.log(\"removed cookies\");\n    console.log(\"remaining: \", cookies.getAll())\n  }\n\n  handleReplay = () => {\n    this.ref.seek(0);\n  }\n\n  getTime = () => {\n    if (this.ref !== undefined){\n      return this.ref.seek();\n    } else {\n      return 0;\n    }\n  }\n\n  jump = () => {\n    this.ref.seek(this.state.duration - 1);\n  }\n\n  handlePlay = () => {\n    // starts and stops the player\n    // if the player is starting from the beginning, logs a new start\n    // stores it all in cookies\n\n    var rval = {playing: !this.state.playing};\n    if (this.getTime() === 0){\n      rval = {...rval, plays: this.state.plays + 1};\n      const cookies = new Cookies();\n      cookies.set(this.test, {...this.cookie, main: this.state.plays + 1}, { path: \"/\" });\n    }\n\n    this.setState(rval);\n  }\n\n\n  handleEnd = () => {\n    // Stops the player from playing and if it was the last run,\n    // disables the button\n\n    var rval = {playing: false};\n\n    if (this.state.plays >= 2){\n      rval = {...rval, disabled: true}\n    }\n    this.setState(rval);\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactHowler\n          src={[this.src]}\n          playing={this.state.playing}\n          onLoad={this.getDuration}\n          onEnd={this.handleEnd}\n          ref={ref => this.ref = ref}\n        />\n        <Button onClick={this.handlePlay} disabled={this.state.disabled}>{ this.state.playing ? \"Pause\" : \"Play\" }</Button>\n        <Button onClick={this.jump}>JUMP</Button>\n        <Button onClick={this.handleReplay}>Replay</Button>\n        <Button onClick={this.getTime}>Time</Button>\n        <Button onClick={this.addCookie}>Add Cookie</Button>\n        <Button onClick={this.checkCookie}>Check Cookie</Button>\n        <Button onClick={this.removeCookie}>Remove Cookies</Button>\n        <Button onClick={this.getDuration}>Get Duration</Button>\n        <Progress value={this.state.progress} />\n      </div>\n    )\n  }\n}\n\nexport default OnlyPlayPauseButton;\n","import React from 'react';\nimport OnlyPlayButton from './OnlyPlayButton.js';\nimport OnlyPlayPauseButton from './OnlyPlayPauseButton.js';\n\n/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  views: {\n    1: #,\n    2: #,\n    ...\n}\n  }\n*/\n\n\nclass Audio extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.src = props.src\n    this.test = props.test\n  }\n\n  render(){\n    const questions = [1,2,3,4,5,6];\n    return(\n      <div className=\"container\">\n        <div className=\"header\">\n          <img src=\"https://raw.githubusercontent.com/kierancyphus/english_test/master/tandem.png\" />\n        </div>\n        <div className=\"content\">\n          <h3>Main Audio: You can listen to this two times etc</h3>\n          <OnlyPlayPauseButton src=\"https://raw.githubusercontent.com/kierancyphus/english_test/master/B1.mp4\" test={this.test} />\n          <div className=\"questions\">\n            {questions.map(question =>\n              <div key={\"div\" + question + this.test}>\n                <h3 key={\"title\" + question + this.test}>Question {21 + question}: </h3>\n                <OnlyPlayButton src={\"https://raw.githubusercontent.com/kierancyphus/english_test/master/\" + this.test + \"-audio-\" + question.toString() + \".m4a\"}\n                                key={\"button\" + question + this.test}\n                                question={question}\n                                test={this.test}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Audio;\n","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Audio from './Components/Audio.js'\n\nfunction App() {\n  return (\n    <div>\n      <Router basename={process.env.PUBLIC_URL}>\n        <div>\n          <Switch>\n            <Route exact path=\"/b1\">\n              <Audio src=\"https://raw.githubusercontent.com/kierancyphus/english_test/master/B1.mp4\" test=\"b1\"/>\n            </Route>\n            <Route exact path=\"/b2\">\n              <Audio src=\"https://raw.githubusercontent.com/kierancyphus/english_test/master/B2.mp4\" test=\"b2\" />\n            </Route>\n            <Route exact path=\"/\">\n              <h1>hi is this working</h1>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}