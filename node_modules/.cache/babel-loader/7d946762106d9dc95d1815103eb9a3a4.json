{"ast":null,"code":"var _jsxFileName = \"/Users/alexcyphus/Documents/GitHub/english_test/src/Components/OnlyPlayPauseButton.js\";\nimport React from 'react';\nimport ReactHowler from 'react-howler';\nimport { Button, Progress } from 'reactstrap';\nimport Cookies from 'universal-cookie';\n/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  main: #\n}\n  }\n*/\n\nclass OnlyPlayPauseButton extends React.Component {\n  // Play Pause and restart should all be one button\n  constructor(props) {\n    super(props); // initialize state variables\n\n    this.getProgress = () => {\n      // return full bar if they previously used up all their listens\n      // returns a percentage if they haven't\n      // used up their listens on previous visit\n      if (this.state.plays >= 2 && this.getTime() == 0) {\n        this.setState({\n          progress: 100\n        });\n        return;\n      } // still have listens and will return percentage\n\n\n      if (this.ref !== undefined && this.state.duration !== undefined) {\n        this.setState({\n          progress: this.ref.seek() / this.state.duration * 100\n        });\n      } else {\n        this.setState({\n          progress: 0\n        });\n      }\n    };\n\n    this.getDuration = () => {\n      this.setState({\n        duration: this.ref.duration()\n      });\n    };\n\n    this.addCookie = () => {\n      const cookies = new Cookies();\n      const current_cookie = cookies.get(\"view count\");\n\n      if (cookies.get(\"view count\") !== undefined) {\n        // There is already a cookie so increment\n        const count = parseInt(current_cookie) + 1; // I feel like there should be an update cookie thing but this is easier\n\n        cookies.remove('view count', {\n          path: '/'\n        });\n        cookies.set('view count', count.toString(), {\n          path: '/'\n        });\n      } else {\n        // There is currently no cookie so add one\n        cookies.set('view count', '0', {\n          path: '/'\n        });\n        console.log(\"added cookie\");\n      }\n    };\n\n    this.checkCookie = () => {\n      const cookies = new Cookies();\n      console.log(cookies.getAll());\n    };\n\n    this.removeCookie = () => {\n      const cookies = new Cookies();\n      cookies.remove(this.test, {\n        path: '/'\n      });\n      console.log(\"removed cookies\");\n      console.log(\"remaining: \", cookies.getAll());\n    };\n\n    this.handleReplay = () => {\n      this.ref.seek(0);\n    };\n\n    this.getTime = () => {\n      if (this.ref !== undefined) {\n        return this.ref.seek();\n      } else {\n        return 0;\n      }\n    };\n\n    this.jump = () => {\n      this.ref.seek(this.state.duration - 1);\n    };\n\n    this.handlePlay = () => {\n      // starts and stops the player\n      // if the player is starting from the beginning, logs a new start\n      // stores it all in cookies\n      var rval = {\n        playing: !this.state.playing\n      };\n\n      if (this.getTime() === 0) {\n        rval = { ...rval,\n          plays: this.state.plays + 1\n        };\n        const cookies = new Cookies();\n        cookies.set(this.test, { ...this.cookie,\n          main: this.state.plays + 1\n        }, {\n          path: \"/\"\n        });\n      }\n\n      this.setState(rval);\n    };\n\n    this.handleEnd = () => {\n      // Stops the player from playing and if it was the last run,\n      // disables the button\n      var rval = {\n        playing: false\n      };\n\n      if (this.state.plays >= 2) {\n        rval = { ...rval,\n          disabled: true\n        };\n      }\n\n      this.setState(rval);\n    };\n\n    this.state = {\n      playing: false,\n      progress: 0,\n      plays: 0,\n      disabled: false\n    }; // pass down props\n\n    this.src = props.src;\n    this.question = props.question;\n    this.test = props.test; // Create reference to the audio compornent\n\n    this.ref = React.createRef(); // Get cookies for if they are reloading the page\n\n    const _cookies = new Cookies();\n\n    this.cookie = _cookies.get(this.test); // make cookie if it's undefined\n\n    if (this.cookie === undefined) {\n      _cookies.set(this.test, {\n        viewed: [],\n        main: 0\n      }, {\n        path: \"/\"\n      });\n\n      this.cookie = {\n        viewed: [],\n        main: 0\n      };\n    } // Check cookies to see if they've already accessed and disable if necessary\n    else {\n        this.state.plays = parseInt(this.cookie[\"main\"]);\n      } // disable button if max amount of plays have been reached\n\n\n    if (this.state.plays >= 2) {\n      this.state.disabled = true;\n    }\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.getProgress(), 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ReactHowler, {\n      src: [this.src],\n      playing: this.state.playing,\n      onLoad: this.getDuration,\n      onEnd: this.handleEnd,\n      ref: ref => this.ref = ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handlePlay,\n      disabled: this.state.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, this.state.playing ? \"Pause\" : \"Play\"));\n  }\n\n}\n\nexport default OnlyPlayPauseButton;","map":{"version":3,"sources":["/Users/alexcyphus/Documents/GitHub/english_test/src/Components/OnlyPlayPauseButton.js"],"names":["React","ReactHowler","Button","Progress","Cookies","OnlyPlayPauseButton","Component","constructor","props","getProgress","state","plays","getTime","setState","progress","ref","undefined","duration","seek","getDuration","addCookie","cookies","current_cookie","get","count","parseInt","remove","path","set","toString","console","log","checkCookie","getAll","removeCookie","test","handleReplay","jump","handlePlay","rval","playing","cookie","main","handleEnd","disabled","src","question","createRef","viewed","componentDidMount","intervalID","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactHowler from 'react-howler';\nimport { Button, Progress } from 'reactstrap';\nimport Cookies from 'universal-cookie';\n\n/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  main: #\n}\n  }\n*/\n\nclass OnlyPlayPauseButton extends React.Component {\n  // Play Pause and restart should all be one button\n\n  constructor (props) {\n    super(props);\n\n    // initialize state variables\n    this.state = {\n      playing: false,\n      progress: 0,\n      plays: 0,\n      disabled: false\n    }\n\n    // pass down props\n    this.src = props.src;\n    this.question = props.question;\n    this.test = props.test;\n\n    // Create reference to the audio compornent\n    this.ref = React.createRef();\n\n    // Get cookies for if they are reloading the page\n    const cookies = new Cookies();\n    this.cookie = cookies.get(this.test);\n\n    // make cookie if it's undefined\n    if (this.cookie === undefined){\n      cookies.set(this.test, {viewed: [], main: 0}, { path: \"/\" });\n      this.cookie = {viewed: [], main: 0};\n    }\n\n    // Check cookies to see if they've already accessed and disable if necessary\n    else {\n      this.state.plays = parseInt(this.cookie[\"main\"])\n    }\n\n    // disable button if max amount of plays have been reached\n    if (this.state.plays >= 2){\n      this.state.disabled = true;\n    }\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.getProgress(),\n      100\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  getProgress = () => {\n    // return full bar if they previously used up all their listens\n    // returns a percentage if they haven't\n\n    // used up their listens on previous visit\n    if (this.state.plays >= 2 && this.getTime() == 0){\n      this.setState({\n        progress: 100\n      }); return;\n    }\n\n    // still have listens and will return percentage\n    if (this.ref !== undefined && this.state.duration !== undefined){\n      this.setState({\n        progress: this.ref.seek() / this.state.duration * 100\n      });\n    } else {\n      this.setState({\n        progress: 0\n      });\n    }\n  }\n\n  getDuration = () => {\n    this.setState({\n      duration: this.ref.duration()\n    });\n  }\n\n  addCookie = () => {\n    const cookies = new Cookies();\n\n    const current_cookie = cookies.get(\"view count\")\n\n    if (cookies.get(\"view count\") !== undefined){\n      // There is already a cookie so increment\n      const count = parseInt(current_cookie) + 1;\n      // I feel like there should be an update cookie thing but this is easier\n      cookies.remove('view count', { path: '/' });\n      cookies.set('view count', count.toString(), { path: '/' });\n    } else {\n      // There is currently no cookie so add one\n      cookies.set('view count','0', { path: '/' });\n    console.log(\"added cookie\");\n    }\n  }\n\n  checkCookie = () => {\n    const cookies = new Cookies();\n    console.log(cookies.getAll());\n  }\n\n  removeCookie = () => {\n    const cookies = new Cookies();\n    cookies.remove(this.test, { path: '/' });\n    console.log(\"removed cookies\");\n    console.log(\"remaining: \", cookies.getAll())\n  }\n\n  handleReplay = () => {\n    this.ref.seek(0);\n  }\n\n  getTime = () => {\n    if (this.ref !== undefined){\n      return this.ref.seek();\n    } else {\n      return 0;\n    }\n  }\n\n  jump = () => {\n    this.ref.seek(this.state.duration - 1);\n  }\n\n  handlePlay = () => {\n    // starts and stops the player\n    // if the player is starting from the beginning, logs a new start\n    // stores it all in cookies\n\n    var rval = {playing: !this.state.playing};\n    if (this.getTime() === 0){\n      rval = {...rval, plays: this.state.plays + 1};\n      const cookies = new Cookies();\n      cookies.set(this.test, {...this.cookie, main: this.state.plays + 1}, { path: \"/\" });\n    }\n\n    this.setState(rval);\n  }\n\n\n  handleEnd = () => {\n    // Stops the player from playing and if it was the last run,\n    // disables the button\n\n    var rval = {playing: false};\n\n    if (this.state.plays >= 2){\n      rval = {...rval, disabled: true}\n    }\n    this.setState(rval);\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactHowler\n          src={[this.src]}\n          playing={this.state.playing}\n          onLoad={this.getDuration}\n          onEnd={this.handleEnd}\n          ref={ref => this.ref = ref}\n        />\n        <Button onClick={this.handlePlay} disabled={this.state.disabled}>{ this.state.playing ? \"Pause\" : \"Play\" }</Button>\n        {/*\n        <Button onClick={this.jump}>JUMP</Button>\n        <Button onClick={this.handleReplay}>Replay</Button>\n        <Button onClick={this.getTime}>Time</Button>\n        <Button onClick={this.addCookie}>Add Cookie</Button>\n        <Button onClick={this.checkCookie}>Check Cookie</Button>\n        <Button onClick={this.removeCookie}>Remove Cookies</Button>\n        <Button onClick={this.getDuration}>Get Duration</Button>\n        <Progress value={this.state.progress} />\n        */}\n      </div>\n    )\n  }\n}\n\nexport default OnlyPlayPauseButton;\n"]},"metadata":{},"sourceType":"module"}