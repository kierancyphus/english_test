{"ast":null,"code":"var _jsxFileName = \"/Users/alexcyphus/Documents/GitHub/english_test/src/Components/OnlyPlayButton.js\";\nimport React from 'react';\nimport ReactHowler from 'react-howler';\nimport { Button, Progress } from 'reactstrap';\nimport Cookies from 'universal-cookie';\n/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  Main: #\n  }\n*/\n\nclass OnlyPlayButton extends React.Component {\n  constructor(props) {\n    super(props); // initialize state variables\n\n    this.getProgress = () => {\n      // fill progress bar if they listened to it on this visit\n      // Already played max times\n      if (this.state.played === 2) {\n        this.setState({\n          progress: 100\n        });\n        return;\n      } // get progress\n      else if (this.ref !== undefined && this.state.duration !== undefined) {\n          this.setState({\n            progress: this.ref.seek() / this.state.duration * 100\n          });\n        }\n\n      return;\n    };\n\n    this.getDuration = () => {\n      // returns length of audio clip in seconds\n      this.setState({\n        duration: this.ref.duration()\n      });\n    };\n\n    this.handleClick = () => {\n      // Set the button as disabled so that they can't pause\n      // the cookies are set after the promise to avoid async with the bar loading\n      this.setState((state, props) => {\n        return {\n          playing: !state.playing,\n          disabled: true,\n          played: state.played + 1\n        };\n      }, () => {\n        const cookies = new Cookies();\n        const updated_viewed = cookies.get(this.test)[\"viewed\"];\n        cookies.set(this.test, { ...this.cookie,\n          viewed: [...updated_viewed, this.question]\n        }, {\n          path: \"/\"\n        });\n      });\n    };\n\n    this.handleEnd = () => {\n      this.setState((state, props) => {\n        return {\n          playing: false,\n          played: state.played + 1\n        };\n      });\n    };\n\n    this.state = {\n      playing: false,\n      progress: 0,\n      disabled: false,\n      played: 0\n    }; // pass down props\n\n    this.src = props.src;\n    this.question = props.question;\n    this.test = props.test; // get ready to connect to the howler element\n\n    this.ref = React.createRef(); // Get cookies for if they are reloading the page\n\n    const _cookies = new Cookies();\n\n    this.cookie = _cookies.get(this.test); // make cookie if it's undefined\n\n    if (this.cookie === undefined) {\n      _cookies.set(this.test, {\n        viewed: [],\n        main: 0\n      }, {\n        path: \"/\"\n      });\n\n      this.cookie = {\n        viewed: [],\n        main: 0\n      };\n    } // get the data and store it in state if it already existed\n    else {\n        if (this.cookie[\"viewed\"].includes(this.question)) {\n          this.state.disabled = true;\n          this.state.played = 2;\n        }\n      }\n  } // check the progress bar ten times a second\n\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.getProgress(), 100);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: this.handleClick,\n      disabled: this.state.disabled,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    }, \"Play\"), /*#__PURE__*/React.createElement(ReactHowler, {\n      src: [this.src],\n      playing: this.state.playing,\n      ref: ref => this.ref = ref,\n      onLoad: this.getDuration,\n      onEnd: this.handleEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Progress, {\n      value: this.state.progress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default OnlyPlayButton;","map":{"version":3,"sources":["/Users/alexcyphus/Documents/GitHub/english_test/src/Components/OnlyPlayButton.js"],"names":["React","ReactHowler","Button","Progress","Cookies","OnlyPlayButton","Component","constructor","props","getProgress","state","played","setState","progress","ref","undefined","duration","seek","getDuration","handleClick","playing","disabled","cookies","updated_viewed","get","test","set","cookie","viewed","question","path","handleEnd","src","createRef","main","includes","componentDidMount","intervalID","setInterval","componentWillUnmount","clearInterval","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactHowler from 'react-howler';\nimport { Button, Progress } from 'reactstrap';\nimport Cookies from 'universal-cookie';\n\n/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  Main: #\n  }\n*/\n\nclass OnlyPlayButton extends React.Component {\n  constructor(props){\n    super(props);\n\n    // initialize state variables\n    this.state = {\n      playing: false,\n      progress: 0,\n      disabled: false,\n      played: 0\n    }\n\n    // pass down props\n    this.src = props.src;\n    this.question = props.question;\n    this.test = props.test;\n\n    // get ready to connect to the howler element\n    this.ref = React.createRef();\n\n\n    // Get cookies for if they are reloading the page\n    const cookies = new Cookies();\n    this.cookie = cookies.get(this.test);\n\n    // make cookie if it's undefined\n    if (this.cookie === undefined){\n      cookies.set(this.test, {viewed: [], main: 0}, { path: \"/\" });\n      this.cookie = {viewed: [], main: 0};\n    }\n\n    // get the data and store it in state if it already existed\n    else {\n      if (this.cookie[\"viewed\"].includes(this.question)){\n        this.state.disabled = true;\n        this.state.played = 2\n      }\n    }\n  }\n\n  // check the progress bar ten times a second\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.getProgress(),\n      100\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  getProgress = () => {\n    // fill progress bar if they listened to it on this visit\n\n    // Already played max times\n    if (this.state.played === 2){\n      this.setState({ progress: 100 });\n      return;\n    }\n\n    // get progress\n    else if (this.ref !== undefined && this.state.duration !== undefined){\n      this.setState({\n        progress: this.ref.seek() / this.state.duration * 100\n      });\n    } return;\n  }\n\n  getDuration = () => {\n    // returns length of audio clip in seconds\n    this.setState({\n      duration: this.ref.duration()\n    });\n  }\n\n  handleClick = () => {\n    // Set the button as disabled so that they can't pause\n    // the cookies are set after the promise to avoid async with the bar loading\n    this.setState((state, props) => {\n      return {\n        playing: !state.playing,\n        disabled: true,\n        played: state.played + 1\n      }\n    }, () => {\n      const cookies = new Cookies();\n      const updated_viewed = cookies.get(this.test)[\"viewed\"];\n      cookies.set(this.test, {...this.cookie, viewed: [...updated_viewed, this.question]}, { path : \"/\" });\n    });\n  }\n\n  handleEnd = () => {\n    this.setState((state, props) => {\n      return {\n        playing: false,\n        played: state.played + 1\n      };\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <Button onClick={this.handleClick} disabled={this.state.disabled}>Play</Button>\n        <ReactHowler\n          src={[this.src]}\n          playing={this.state.playing}\n          ref={ref => this.ref = ref}\n          onLoad={this.getDuration}\n          onEnd={this.handleEnd}\n        />\n        <Progress value={this.state.progress} />\n      </div>\n    );\n  }\n}\n\nexport default OnlyPlayButton;\n"]},"metadata":{},"sourceType":"module"}