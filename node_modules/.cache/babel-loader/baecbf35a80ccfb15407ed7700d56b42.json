{"ast":null,"code":"import _objectSpread from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import ReactHowler from'react-howler';import{Button,Progress}from'reactstrap';import Cookies from'universal-cookie';/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  main: #\n}\n  }\n*/var OnlyPlayPauseButton=/*#__PURE__*/function(_React$Component){_inherits(OnlyPlayPauseButton,_React$Component);var _super=_createSuper(OnlyPlayPauseButton);// Play Pause and restart should all be one button\nfunction OnlyPlayPauseButton(props){var _this;_classCallCheck(this,OnlyPlayPauseButton);_this=_super.call(this,props);// initialize state variables\n_this.getProgress=function(){// return full bar if they previously used up all their listens\n// returns a percentage if they haven't\n// used up their listens on previous visit\nif(_this.state.plays>=2&&_this.getTime()==0){_this.setState({progress:100});return;}// still have listens and will return percentage\nif(_this.ref!==undefined&&_this.state.duration!==undefined){_this.setState({progress:_this.ref.seek()/_this.state.duration*100});}else{_this.setState({progress:0});}};_this.getDuration=function(){_this.setState({duration:_this.ref.duration()});};_this.addCookie=function(){var cookies=new Cookies();var current_cookie=cookies.get(\"view count\");if(cookies.get(\"view count\")!==undefined){// There is already a cookie so increment\nvar count=parseInt(current_cookie)+1;// I feel like there should be an update cookie thing but this is easier\ncookies.remove('view count',{path:'/'});cookies.set('view count',count.toString(),{path:'/'});}else{// There is currently no cookie so add one\ncookies.set('view count','0',{path:'/'});console.log(\"added cookie\");}};_this.checkCookie=function(){var cookies=new Cookies();console.log(cookies.getAll());};_this.removeCookie=function(){var cookies=new Cookies();cookies.remove(_this.test,{path:'/'});console.log(\"removed cookies\");console.log(\"remaining: \",cookies.getAll());};_this.handleReplay=function(){_this.ref.seek(0);};_this.getTime=function(){if(_this.ref!==undefined){return _this.ref.seek();}else{return 0;}};_this.jump=function(){_this.ref.seek(_this.state.duration-1);};_this.handlePlay=function(){// starts and stops the player\n// if the player is starting from the beginning, logs a new start\n// stores it all in cookies\nvar rval={playing:!_this.state.playing};if(_this.getTime()===0){rval=_objectSpread({},rval,{plays:_this.state.plays+1});var cookies=new Cookies();cookies.set(_this.test,_objectSpread({},_this.cookie,{main:_this.state.plays+1}),{path:\"/\"});}_this.setState(rval);};_this.handleEnd=function(){// Stops the player from playing and if it was the last run,\n// disables the button\nvar rval={playing:false};if(_this.state.plays>=2){rval=_objectSpread({},rval,{disabled:true});}_this.setState(rval);};_this.state={playing:false,progress:0,plays:0,disabled:false};// pass down props\n_this.src=props.src;_this.question=props.question;_this.test=props.test;// Create reference to the audio compornent\n_this.ref=React.createRef();// Get cookies for if they are reloading the page\nvar _cookies=new Cookies();_this.cookie=_cookies.get(_this.test);// make cookie if it's undefined\nif(_this.cookie===undefined){_cookies.set(_this.test,{viewed:[],main:0},{path:\"/\"});_this.cookie={viewed:[],main:0};}// Check cookies to see if they've already accessed and disable if necessary\nelse{_this.state.plays=parseInt(_this.cookie[\"main\"]);}// disable button if max amount of plays have been reached\nif(_this.state.plays>=2){_this.state.disabled=true;}return _this;}_createClass(OnlyPlayPauseButton,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.intervalID=setInterval(function(){return _this2.getProgress();},100);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.intervalID);}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(ReactHowler,{src:[this.src],playing:this.state.playing,onLoad:this.getDuration,onEnd:this.handleEnd,ref:function ref(_ref){return _this3.ref=_ref;}}),/*#__PURE__*/React.createElement(Button,{onClick:this.handlePlay,disabled:this.state.disabled},this.state.playing?\"Pause\":\"Play\"),/*#__PURE__*/React.createElement(Progress,{value:this.state.progress}));}}]);return OnlyPlayPauseButton;}(React.Component);export default OnlyPlayPauseButton;","map":{"version":3,"sources":["/Users/alexcyphus/Documents/GitHub/english_test/src/Components/OnlyPlayPauseButton.js"],"names":["React","ReactHowler","Button","Progress","Cookies","OnlyPlayPauseButton","props","getProgress","state","plays","getTime","setState","progress","ref","undefined","duration","seek","getDuration","addCookie","cookies","current_cookie","get","count","parseInt","remove","path","set","toString","console","log","checkCookie","getAll","removeCookie","test","handleReplay","jump","handlePlay","rval","playing","cookie","main","handleEnd","disabled","src","question","createRef","viewed","intervalID","setInterval","clearInterval","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactHowler from 'react-howler';\nimport { Button, Progress } from 'reactstrap';\nimport Cookies from 'universal-cookie';\n\n/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  main: #\n}\n  }\n*/\n\nclass OnlyPlayPauseButton extends React.Component {\n  // Play Pause and restart should all be one button\n\n  constructor (props) {\n    super(props);\n\n    // initialize state variables\n    this.state = {\n      playing: false,\n      progress: 0,\n      plays: 0,\n      disabled: false\n    }\n\n    // pass down props\n    this.src = props.src;\n    this.question = props.question;\n    this.test = props.test;\n\n    // Create reference to the audio compornent\n    this.ref = React.createRef();\n\n    // Get cookies for if they are reloading the page\n    const cookies = new Cookies();\n    this.cookie = cookies.get(this.test);\n\n    // make cookie if it's undefined\n    if (this.cookie === undefined){\n      cookies.set(this.test, {viewed: [], main: 0}, { path: \"/\" });\n      this.cookie = {viewed: [], main: 0};\n    }\n\n    // Check cookies to see if they've already accessed and disable if necessary\n    else {\n      this.state.plays = parseInt(this.cookie[\"main\"])\n    }\n\n    // disable button if max amount of plays have been reached\n    if (this.state.plays >= 2){\n      this.state.disabled = true;\n    }\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.getProgress(),\n      100\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  getProgress = () => {\n    // return full bar if they previously used up all their listens\n    // returns a percentage if they haven't\n\n    // used up their listens on previous visit\n    if (this.state.plays >= 2 && this.getTime() == 0){\n      this.setState({\n        progress: 100\n      }); return;\n    }\n\n    // still have listens and will return percentage\n    if (this.ref !== undefined && this.state.duration !== undefined){\n      this.setState({\n        progress: this.ref.seek() / this.state.duration * 100\n      });\n    } else {\n      this.setState({\n        progress: 0\n      });\n    }\n  }\n\n  getDuration = () => {\n    this.setState({\n      duration: this.ref.duration()\n    });\n  }\n\n  addCookie = () => {\n    const cookies = new Cookies();\n\n    const current_cookie = cookies.get(\"view count\")\n\n    if (cookies.get(\"view count\") !== undefined){\n      // There is already a cookie so increment\n      const count = parseInt(current_cookie) + 1;\n      // I feel like there should be an update cookie thing but this is easier\n      cookies.remove('view count', { path: '/' });\n      cookies.set('view count', count.toString(), { path: '/' });\n    } else {\n      // There is currently no cookie so add one\n      cookies.set('view count','0', { path: '/' });\n    console.log(\"added cookie\");\n    }\n  }\n\n  checkCookie = () => {\n    const cookies = new Cookies();\n    console.log(cookies.getAll());\n  }\n\n  removeCookie = () => {\n    const cookies = new Cookies();\n    cookies.remove(this.test, { path: '/' });\n    console.log(\"removed cookies\");\n    console.log(\"remaining: \", cookies.getAll())\n  }\n\n  handleReplay = () => {\n    this.ref.seek(0);\n  }\n\n  getTime = () => {\n    if (this.ref !== undefined){\n      return this.ref.seek();\n    } else {\n      return 0;\n    }\n  }\n\n  jump = () => {\n    this.ref.seek(this.state.duration - 1);\n  }\n\n  handlePlay = () => {\n    // starts and stops the player\n    // if the player is starting from the beginning, logs a new start\n    // stores it all in cookies\n\n    var rval = {playing: !this.state.playing};\n    if (this.getTime() === 0){\n      rval = {...rval, plays: this.state.plays + 1};\n      const cookies = new Cookies();\n      cookies.set(this.test, {...this.cookie, main: this.state.plays + 1}, { path: \"/\" });\n    }\n\n    this.setState(rval);\n  }\n\n\n  handleEnd = () => {\n    // Stops the player from playing and if it was the last run,\n    // disables the button\n\n    var rval = {playing: false};\n\n    if (this.state.plays >= 2){\n      rval = {...rval, disabled: true}\n    }\n    this.setState(rval);\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactHowler\n          src={[this.src]}\n          playing={this.state.playing}\n          onLoad={this.getDuration}\n          onEnd={this.handleEnd}\n          ref={ref => this.ref = ref}\n        />\n        <Button onClick={this.handlePlay} disabled={this.state.disabled}>{ this.state.playing ? \"Pause\" : \"Play\" }</Button>\n        {/*\n        <Button onClick={this.jump}>JUMP</Button>\n        <Button onClick={this.handleReplay}>Replay</Button>\n        <Button onClick={this.getTime}>Time</Button>\n        <Button onClick={this.addCookie}>Add Cookie</Button>\n        <Button onClick={this.checkCookie}>Check Cookie</Button>\n        <Button onClick={this.removeCookie}>Remove Cookies</Button>\n        <Button onClick={this.getDuration}>Get Duration</Button>\n        */}\n        <Progress value={this.state.progress} />\n      </div>\n    )\n  }\n}\n\nexport default OnlyPlayPauseButton;\n"]},"metadata":{},"sourceType":"module"}