{"ast":null,"code":"import _toConsumableArray from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/alexcyphus/Documents/GitHub/english_test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import ReactHowler from'react-howler';import{Button,Progress}from'reactstrap';import Cookies from'universal-cookie';/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  Main: #\n  }\n*/var OnlyPlayButton=/*#__PURE__*/function(_React$Component){_inherits(OnlyPlayButton,_React$Component);var _super=_createSuper(OnlyPlayButton);function OnlyPlayButton(props){var _this;_classCallCheck(this,OnlyPlayButton);_this=_super.call(this,props);// initialize state variables\n_this.getProgress=function(){// fill progress bar if they listened to it on this visit\n// Already played max times\nif(_this.state.played===2){_this.setState({progress:100});return;}// get progress\nelse if(_this.ref!==undefined&&_this.state.duration!==undefined){_this.setState({progress:_this.ref.seek()/_this.state.duration*100});}return;};_this.getDuration=function(){// returns length of audio clip in seconds\n_this.setState({duration:_this.ref.duration()});};_this.handleClick=function(){// Set the button as disabled so that they can't pause\n// the cookies are set after the promise to avoid async with the bar loading\n_this.setState(function(state,props){return{playing:!state.playing,disabled:true,played:state.played+1};},function(){var cookies=new Cookies();var updated_viewed=cookies.get(_this.test)[\"viewed\"];cookies.set(_this.test,_objectSpread({},_this.cookie,{viewed:[].concat(_toConsumableArray(updated_viewed),[_this.question])}),{path:\"/\"});});};_this.handleEnd=function(){_this.setState(function(state,props){return{playing:false,played:state.played+1};});};_this.state={playing:false,progress:0,disabled:false,played:0};// pass down props\n_this.src=props.src;_this.question=props.question;_this.test=props.test;// get ready to connect to the howler element\n_this.ref=React.createRef();// Get cookies for if they are reloading the page\nvar _cookies=new Cookies();_this.cookie=_cookies.get(_this.test);// make cookie if it's undefined\nif(_this.cookie===undefined){_cookies.set(_this.test,{viewed:[],main:0},{path:\"/\"});_this.cookie={viewed:[],main:0};}// get the data and store it in state if it already existed\nelse{if(_this.cookie[\"viewed\"].includes(_this.question)){_this.state.disabled=true;_this.state.played=2;}}return _this;}// check the progress bar ten times a second\n_createClass(OnlyPlayButton,[{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;this.intervalID=setInterval(function(){return _this2.getProgress();},100);}},{key:\"componentWillUnmount\",value:function componentWillUnmount(){clearInterval(this.intervalID);}},{key:\"render\",value:function render(){var _this3=this;return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(Button,{onClick:this.handleClick,disabled:this.state.disabled},\"Play\"),/*#__PURE__*/React.createElement(ReactHowler,{src:[this.src],playing:this.state.playing,ref:function ref(_ref){return _this3.ref=_ref;},onLoad:this.getDuration,onEnd:this.handleEnd}),/*#__PURE__*/React.createElement(Progress,{value:this.state.progress}));}}]);return OnlyPlayButton;}(React.Component);export default OnlyPlayButton;","map":{"version":3,"sources":["/Users/alexcyphus/Documents/GitHub/english_test/src/Components/OnlyPlayButton.js"],"names":["React","ReactHowler","Button","Progress","Cookies","OnlyPlayButton","props","getProgress","state","played","setState","progress","ref","undefined","duration","seek","getDuration","handleClick","playing","disabled","cookies","updated_viewed","get","test","set","cookie","viewed","question","path","handleEnd","src","createRef","main","includes","intervalID","setInterval","clearInterval","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactHowler from 'react-howler';\nimport { Button, Progress } from 'reactstrap';\nimport Cookies from 'universal-cookie';\n\n/*\n  var cookie = {\n    viewed: [\n      1,2,3,4,5...\n  ],\n  Main: #\n  }\n*/\n\nclass OnlyPlayButton extends React.Component {\n  constructor(props){\n    super(props);\n\n    // initialize state variables\n    this.state = {\n      playing: false,\n      progress: 0,\n      disabled: false,\n      played: 0\n    }\n\n    // pass down props\n    this.src = props.src;\n    this.question = props.question;\n    this.test = props.test;\n\n    // get ready to connect to the howler element\n    this.ref = React.createRef();\n\n\n    // Get cookies for if they are reloading the page\n    const cookies = new Cookies();\n    this.cookie = cookies.get(this.test);\n\n    // make cookie if it's undefined\n    if (this.cookie === undefined){\n      cookies.set(this.test, {viewed: [], main: 0}, { path: \"/\" });\n      this.cookie = {viewed: [], main: 0};\n    }\n\n    // get the data and store it in state if it already existed\n    else {\n      if (this.cookie[\"viewed\"].includes(this.question)){\n        this.state.disabled = true;\n        this.state.played = 2\n      }\n    }\n  }\n\n  // check the progress bar ten times a second\n  componentDidMount() {\n    this.intervalID = setInterval(\n      () => this.getProgress(),\n      100\n    );\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  getProgress = () => {\n    // fill progress bar if they listened to it on this visit\n\n    // Already played max times\n    if (this.state.played === 2){\n      this.setState({ progress: 100 });\n      return;\n    }\n\n    // get progress\n    else if (this.ref !== undefined && this.state.duration !== undefined){\n      this.setState({\n        progress: this.ref.seek() / this.state.duration * 100\n      });\n    } return;\n  }\n\n  getDuration = () => {\n    // returns length of audio clip in seconds\n    this.setState({\n      duration: this.ref.duration()\n    });\n  }\n\n  handleClick = () => {\n    // Set the button as disabled so that they can't pause\n    // the cookies are set after the promise to avoid async with the bar loading\n    this.setState((state, props) => {\n      return {\n        playing: !state.playing,\n        disabled: true,\n        played: state.played + 1\n      }\n    }, () => {\n      const cookies = new Cookies();\n      const updated_viewed = cookies.get(this.test)[\"viewed\"];\n      cookies.set(this.test, {...this.cookie, viewed: [...updated_viewed, this.question]}, { path : \"/\" });\n    });\n  }\n\n  handleEnd = () => {\n    this.setState((state, props) => {\n      return {\n        playing: false,\n        played: state.played + 1\n      };\n    });\n  }\n\n  render() {\n    return(\n      <div>\n        <Button onClick={this.handleClick} disabled={this.state.disabled}>Play</Button>\n        <ReactHowler\n          src={[this.src]}\n          playing={this.state.playing}\n          ref={ref => this.ref = ref}\n          onLoad={this.getDuration}\n          onEnd={this.handleEnd}\n        />\n        <Progress value={this.state.progress} />\n      </div>\n    );\n  }\n}\n\nexport default OnlyPlayButton;\n"]},"metadata":{},"sourceType":"module"}